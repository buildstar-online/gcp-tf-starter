name: Terraform PR
on: 
  pull_request:
  workflow_dispatch:
permissions:
  pull-requests: write
jobs:
  terraform-pr:
    runs-on: ubuntu-latest 
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2

    - uses: actions/checkout@v3
    - name: Terraform fmt
      id: fmt
      run: |
        docker run --platform linux/amd64 \
          -v $(pwd):/terraform -w /terraform \
          hashicorp/terraform fmt
      continue-on-error: false
      shell: bash

    - name: Terraform Init
      id: init
      run: |
        docker run --platform linux/amd64 \
          -e GOOGLE_CREDENTIALS='${{ secrets.TERRAFORM_KEY }}' \
          -v $(pwd):/terraform -w /terraform hashicorp/terraform init -upgrade
      continue-on-error: false
      shell: bash
      
    - name: Terraform Validate
      id: validate
      run: |
        docker run --platform linux/amd64 \
          -v $(pwd):/terraform -w /terraform \
          hashicorp/terraform validate -no-color
      continue-on-error: false
      shell: bash
      
    - name: Terraform Plan
      id: plan
      run: |
        docker run --platform linux/amd64 \
          -e GOOGLE_CREDENTIALS='${{ secrets.TERRAFORM_KEY }}' \
          -v $(pwd):/terraform -w /terraform \
          hashicorp/terraform plan -no-color \
          -var="machine_type=$MACHINE_TYPE" \
          -var="guest_accelerator=$GUEST_ACCELERATOR" \
          -var="guest_accelerator_count=$GUEST_ACCELERATOR_COUNT" \
          -var="disk_size=$DISK_SIZE" \
          -var="os_image=$OS_IMAGE" \
          -var="organization=${{ secrets.ORGANIZATION }}" \
          -var="organization_id=${{ secrets.ORGANIZATION_ID }}" \
          -var="billing_account=${{ secrets.BILLING_ACCOUNT }}"
      continue-on-error: false
      shell: bash
      env:
        MACHINE_TYPE: ${{github.event.inputs.machine_type}}
        GUEST_ACCELERATOR: ${{github.event.inputs.guest_accelerator}}
        GUEST_ACCELERATOR_COUNT: ${{github.event.inputs.guest_accelerator_count}}
        DISK_SIZE: ${{github.event.inputs.disk_size}}
        OS_IMAGE: ${{github.event.inputs.os_image}}     

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.PAT }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
